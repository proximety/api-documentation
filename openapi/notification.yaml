openapi: '3.0.2'
info:
  title: Notification Service
  version: '1.0'
  description: Provides a set of API operations for sending notifications.
  license:
    name: Proximety
    url: www.proximety.io
servers:
  - url: https://app-dev.proximety.io/api
  - url: https://app-staging.proximety.io/api
  - url: https://app-patch.proximety.io/api
  - url: https://app.proximety.io/api
paths:
  /notification/token:
    post: 
      tags:
        - Notification
      summary: Send notification to single user
      description: Send notification to a user with given deviceToken
      operationId: sendTokenNotification 
      requestBody:
        description: Details of the notification
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tokenNotification'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        "400":
          description: Bad request
  /notification/notifications:
    post: 
      tags:
        - Notification
      summary: Get list if  notifications for single user/restuarant
      operationId: getNotifications
      requestBody:
        description: Request criteria for get notifications
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
        required: true
      responses:
        "200":
         description: Successful operation
         content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NotificationList'
        "400":
          description: Bad request
  /notification:
    patch: 
      tags:
        - Notification
      summary: Mark a notification as read
      operationId: getNotifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Notification'
        required: true
      responses:
        "200":
         description: Successful operation
         content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Notification'
        "400":
          description: Bad request
  /notification/topic:
    post: 
      tags:
        - Notification
      summary: Send notification to multiple users
      description: Send notification to all users subscribed to given
      operationId: sendTopicNotification 
      requestBody:
        description: Details of the notification
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/topicNotification'
        required: true
      responses:
        "200":
          description: Successful operation
        "400":
          description: Bad request
  /notification/subscribe:
    post: 
      tags:
        - Notification
      summary: Subscribe to a topic
      description: Subscribes user to the given topic
      operationId: subscribeToTopic
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/subscribe'
        required: true
      responses:
        "200":
          description: Successful operation      
        "400":
          description: Bad request
          
components:
  schemas:
    NotificationRequest:
      type: object
      properties:
        customerId:
          type: string
        restaurantId:
          type: string
        page:
          type: integer
          description: The search offset for doing paginated search.
          example: 20
          default: 0
        size: 
          type: integer
          description: The page size for doing paginated search
          example: 10
          default: 10
    NotificationList:
      type: object
      properties:
        totalUnReadNotificationsCount: 
          type: integer
        notificationsGroups:
          type: array
          items: 
           $ref: '#/components/schemas/NotificationGroupItem'
    NotificationGroupItem:
      type: object
      properties:
        unreadNotificationsCount: 
          type: integer
        notificationGroup:
         type: string
        notifications:
          type: array
          items: 
           $ref: '#/components/schemas/Notification'
    Notification:
      type: object
      properties:
        id:
          type: string
        customerId:
          type: string
        restaurantId:
          type: string
        appName:
          type: string
        title:
          type: string
        message:
          type: string
        imageUrl:
          type: string
        notificationGroup:
          type: string
        notificationType:
          type: string
        landingObjectType:
          type: string
        landingObjectId:
          type: string
        status:
          type: string
        isRead:
          type: boolean
        time:
          type: string
    tokenNotification:
      type: object
      required:
        - appName
        - deviceToken
        - title
        - message
      properties:
        appName:
          type: string
          description: To identify the app to send notification
          enum: 
            - CUSTOMER_APP
            - PARTNER_APP
        deviceToken:
            type: string
            description: Device token of the user.
            example: "hjsdyieuwjsksd-sugsduyfgjksfsdsf"
        title:
            type: string
            description: Notification title.
            example: "Hello"
        message:
            type: string
            description: Notification message.
            example: "Testing"
        imageUrl:
            type: string
            description: Notification image url.
            example: "Testing"
        properties:
            type: object
            description: customizations supported in the notification
            $ref: "#/components/schemas/notificationProperty" 
        data:
            type: object
            $ref: "#/components/schemas/notificationData"
            description: Additional data to be sent in notification. Can have any non null key-value pairs
    topicNotification:
      type: object
      required:
        - appName
        - topic
        - title
        - message
      properties:
        appName:
          type: string
          description: To identify the app to send notification
          enum: 
            - CUSTOMER_APP
            - PARTNER_APP
        topic:
            type: string
            description: Topic subscribed.
            example: "partner-notify"
        title:
            type: string
            description: Notification title.
            example: "Hello"
        message:
            type: string
            description: Notification message.
            example: "Testing"
        imageUrl:
            type: string
            description: Notification image url.
            example: "Testing"
        properties:
            type: object
            description: customizations supported in the notification
            $ref: "#/components/schemas/notificationProperty" 
        data:
            type: object
            description: Additional data to be sent in notification. Can have any non null key-value pairs
            $ref: "#/components/schemas/notificationData"
    subscribe:
      type: object
      required:
        - deviceToken
      properties:
        deviceToken:
            type: string
            description: Device token of the user.
            example: "hjsdyieuwjsksd-sugsduyfgjksfsdsf"
        topic:
            type: string
            description: Topic to be subscribed. If no topic is passed, then default topic is "notifyAll"
            example: "Hello"
    notificationData:
      type: object
      properties:
        notificationType: 
          type: string 
          enum : 
            - FOOD_ORDER_ACCEPTED
            - FOOD_ORDER_REJECTED
            - FOOD_ORDER_READY
            -  FOOD_ORDER_DELIVERED
            - FOOD_ORDER_REFUND_INITIATED
            - FOOD_ORDER_REFUNDED
            - NEW_SCRATCH_CARD
            - CC_TICKET_UPDATE
            - MOVIE_SHOWTIME_REMINDER
            - NEW_FOOD_ORDER_RECEIVED
            - PAYOUT_SETTLED
        landingObjectType:
          type : string
          enum :
            - FOOD_ORDER,
            - MOVIE_TICKET
            - CC_TICKET
            - SCRATCH_CARD
            - PAYOUT
            - EVENT
            - STORE
            - RESTAURANT
            - MOVIE
            - FOOD_COMBO
            - DISH
            - MENU_CATEGORY
            - OFFERS_LIST
            - OFFER
        landingObjectId:
          type : string
          description: unique id of the object
    notificationProperty:
      type: object
      properties:
        sound:
          type: string
          description: name of the sound file
        colour:
          type: string
          description: colour of the notification icon in hexcode
          example: '#000000'
        icon:
          type: string
          description: name of the icon file
