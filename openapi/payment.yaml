openapi: '3.0.2'
info:
  title: Payment Service
  version: '1.0'
  description: Provides a set of API operations relating to payment processing like initiate transaction, updating, checking status etc.
  license:
    name: Proximety
    url: www.proximety.io
servers:
  - url: https://app-dev.proximety.io/api
  - url: https://app-staging.proximety.io/api
  - url: https://app-patch.proximety.io/api
  - url: https://app.proximety.io/api
tags:
- name: Payment
paths:  
  /transactions:
    post: 
      tags:
        - Initiate
      summary: Initiate a transaction
      description: Initiate a transaction based on order id
      operationId: initTransaction
      requestBody:
        description: The details of the order for which a transaction has to be initiated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InitiateTransactionRequest'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InitiateTransactionResponse'
        "400":
          description: Bad request          
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalException"
              example: 
                {
                  "status": 400,
                  "type": "BAD_REQUEST",
                  "title": "Invalid request.",
                  "detail": "Invalid request. Try again.",
                }           
  /transactions/status/_query:
    post: 
      tags:
        - Status
      summary: Status of a transaction
      description: Gets the status of the transaction based on transaction id.
      operationId: checkTransactionStatus
      requestBody:
        description: The details of the transaction whose status is to be checked.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionStatusRequest'
        required: true
      responses:
        "200":          
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionStatusResponse'
        "400":
          description: Bad request          
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalException"
              example: 
                {
                  "status": 400,
                  "type": "BAD_REQUEST",
                  "title": "Invalid request.",
                  "detail": "Invalid request. Try again.",
                }
  /transactions/update:
    post: 
      tags:
        - Update
      summary: Save the transaction details. This should ideally be the callback API.
      description: Save the transaction details.
      operationId: saveTransaction
      requestBody:
        description: transaction details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveTransactionRequest'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                default:
                  description: successful operation
        "400":
          description: Bad request          
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalException"
              example: 
                {
                  "status": 400,
                  "type": "BAD_REQUEST",
                  "title": "Invalid request.",
                  "detail": "Invalid request. Try again.",
                }
  /transactions/transactions-by-order/_query:
    post: 
      tags:
        - Transactions-by-Order
      summary: Get the transaction by order details. 
      description: get the transaction by order details.
      operationId: getTransactionsByOrder
      requestBody:
        description: List of order ids.
        content:
          application/json:
            schema:
              type: array
              example: ["123", "456"]
              items:
                 type: string
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                default:
                  description: successful operation
        "400":
          description: Bad request          
          content:
            application/json:
              schema:
               type: array
               items:
                 $ref: "#/components/schemas/TransactionsByOrder"
components:
  schemas:    
    InitiateTransactionRequest:    
      type: object
      required:
        - orderId
        - customerId
        - txnAmount
        - orderType
      properties:
        orderId: 
          type: string
          description: Internal system identifier for order.
          example: aa73819jd
        clientId: 
          type: string
          description: Internal system identifier of the customer for whom the order is placed.
          example: cc73819jd
        txnAmount:
          type: string
          description: Total transaction amount in rupees upto two decimal places.
          example: "600.35"
        paytmSsoToken:
          type: string
          description: This is a unique token linked with user's Paytm wallet and is provided in the response while linking user's Paytm wallet.
        promoCode:
          type: string
          description: It is the code that has been applied during the transaction on the app.
          example: "TESXXXOMO"   
        orderType:
          type: string
          example: FOOD
          enum:
            - MOVIE
            - FOOD
        paymentOffersApplied:
          type: string
          description: "In case of Offers based on Payment Instrument, inputs could be: paymentOffer parameter json string received in response of ApplyPromo API.Either paymentOffersApplied or simplifiedPaymentOffers."
        simplifiedPaymentOffers:
          type: object
          description: "Object of Simplified Payment Offers. Either paymentOffersApplied or simplifiedPaymentOffers."
          $ref: '#/components/schemas/PaymentOfferDTO'
        splitSettlementInfo:
          type: object
          description: "Split payment details"
          $ref: '#/components/schemas/SplitSettlementDTO'
    SaveTransactionRequest:
      type: object
      required:
        - orderId
        - customerId
        - txnToken
        - status
        - orderType        
      properties:
        orderId:
          type: string
          description: Internal system identifier for order.
          example: aa73819jd
        customerId:
          type: string
          description: Internal system identifier of the customer for whom the order is placed.
          example: cc73819jd
        txnToken:
          type: string
          description: This is the unique transaction token received in the response of Initiate Transaction API. It is valid for 15 minutes.
          example: f0bed899539742309eebd8XXXX7edcf61588842333227
        retry:
          type: boolean
          description: True when the transaction is currently retried.
        status:
          type: string
          description: Transaction status
          enum:
            - SUCCESS
            - PROCESSING
            - FAILED
            - RETRIED            
        orderType:
          type: string
          example: FOOD
          enum:
            - MOVIE
            - FOOD    
    InitiateTransactionResponse:
      type: object
      properties:
        txnId:
          type: string
          description: Transaction id generated by Proximety service.
        responseTimestamp:
          type: string
          description: EPOCH timestamp of the time at which response is being sent.
          example: "1588402269"
        signature:
          type: string
          description: You should validate the parameter values by verifying the signature comes in the response. It ensures that parameter values not tempered.
        txnToken:
          type: string
          description: This is the unique transaction token received in the response of Initiate Transaction API. It is valid for 15 minutes.
          example: f0bed899539742309eebd8XXXX7edcf61588842333227
        resultInfo:
          type: object
          description: This parameter gives the information about the result of the API response.
          $ref: '#/components/schemas/ResultInfo'
        isPromoCodeValid:
          type: boolean
          description: Whether promo code provided in request is Valid or not.
        authenticated:
          type: boolean
          description: True when ssoToken is provided in request and it is valid.
        extraParamsMap:
          type: object
          description: Map for any extra information (in case of error).    
    TransactionStatusRequest:
      type: object
      required:
        - orderId
      properties:
        orderId: 
          type: string
          description: Internal system identifier for order
          example: aa73819jd        
    TransactionStatusResponse:
      type: object
      properties:
        responseTimestamp:
          type: string
          description: EPOCH timestamp of the time at which response is being sent.
          example: "1588402269"
        signature:
          type: string
          description: You should validate the parameter values by verifying the signature comes in the response. It ensures that parameter values not tempered.        
        resultInfo:
          type: object
          description: This parameter gives the information about the result of the API response.
          $ref: '#/components/schemas/ResultInfo'
        txnId:
          type: string
          description: Transaction Id of the payment.
          example: "202005081112128XXXXXX68470101509706"
        bankTxnId:
          type: string
          description: Bank transaction Id from the bank.
          example: "77700XXXX215242"
        orderId:
          type: string
          description: Unique reference ID for an Order request generated by merchant for payment.
          example: "OREDRID_98765"
        txnAmount:
          type: string
          description: Payment transaction amount.
          example: "100.65"
        txnType:
          type: string
          description: Transaction type of the payment.
        gatewayName:
          type: string
          description: Name of the gateway used to process the transaction. In case of Super Router, this is the payment aggregator chosen to process the transaction.        
        gatewayInfo:
          type: string
          description: Response provided by the gateway during payment or transaction. This is available for Super Router product only.
        bankName:
          type: string
          description: Bank Name used in payment.
          example: "HDFC Bank"
        paymentMode:
          type: string
          description: Payment Mode used in payment.
          example: "UPI"
        refundAmount:
          type: string
          description: Refund amount of the payment.
          example: "10.00"
        txnDate:
          type: string
          description: Date on which the pre-auth/capture/release/order was created (depending on the value of txnType).
          example: "2020-05-05 14:00:28"
        payableAmount:
          type: string
          description: Original order value before offer was applied. Only for SimplifiedPaymentOffers (Bank Offers).
        paymentPromoCheckoutData:
          type: string
          description: Only for SimplifiedPaymentOffers (Bank Offers).    
    PaymentOfferDTO:
      type: object
      description: Simplified Payment Offers.
      properties:
        promoCode: 
          type: string
          description: It is the code that has been applied during the transaction on the merchant website.
          example: "TESXXXOMO"
        applyAvailablePromo:
          type: string
          description: Default Promo to be applied.
          example: "true"
        validatePromo:
          type: string
          description: To validate Promo to be applied and fail transaction accordingly.
          example: "false"
    ResultInfo:
      type: object
      description: This parameter gives the information about the result of the API response.
      properties:
        resultCode: 
          type: string
          description: This is the resultCode corresponding to a particular message and is returned to the merchant. It's maximum length is 64.
          example: "0000"
        resultStatus:
          type: string
          description: This parameter indicates the status of API call.
          example: "S"
        resultMsg:
          type: string
          description: This parameter is the result message which contains information about the result.
          example: "Success"
        isRedirect:
          type: boolean
          description: This flag indicates that number of retries are over and user is to be redirected from cashier page.
        bankRetry:
          type: boolean
          description: This flag indicates that retry is allowed at bank's end or not.
        retry:
          type: boolean
          description: This flag indicates that retry is allowed or not.
    SplitSettlementDTO:
      type: object
      description: Split payment details.
      properties:
        splitMethod: 
          type: string
          description: Split method. Possible Values are AMOUNT, PERCENTAGE
          example: "AMOUNT"
        splitInfo:
          type: array
          description: List for child vendor merchant mid's and their split info.
          items:
           $ref: '#/components/schemas/SplitInfoDTO'
    SplitInfoDTO:
      type: object
      description: Split info details.
      properties:
        mid: 
          type: string
          description: Child mid
        partnerId: 
          type: string
          description: Id created for child mid
        amount:
          type: string
          description: Share of child vendor in the split by amount base.
          example: "100.00"
        percentage:
          type: string
          description: Share of child vendor in the split by percentage base.
    TransactionsByOrder:
      type: object
      description: Transactions by order details.
      properties:
        bundleId:
          type: string
          description: Bundle id for the order.
          example: "123"
        amount:
          type: number
          description: Total transactiona amount.
          example: 400
        ordersInfo:
         type: array
         items:
           $ref: '#/components/schemas/OrderInfo'
    OrderInfo:
      type: object
      description: order info
      properties:
        orderId:
          type: string
          description: Order id for the order.
          example: "123"
        tax:
          type: number
          description: Tax of the order amount.
          example: 400
        commision:
          type: number
          description: Commision for the order.
          example: 400
        convinienceFee:
          type: number
          description: Convinience Fee for the order.
          example: 400
        taxOnCommision:
          type: number
          description: Tax On Commision for the order.
          example: 40
        amountPaid:
          type: number
          description: Amount paid  by constomer for order.
          example: 400
    GlobalException:
      type: object
      description: An exception thrown by the system.
      properties:
        status:
          type: integer
          description: The status code for the error.
          example: 401
        type:
          type: string
          description: The type name for the error being thrown.
          example: UNAUTHORIZED
        title:
          type: string
          description: The error title.
          example: Token expired.
        detail:
          type: string
          description: The details of the error being thrown.
          example: The access token has expired for the user. Please generate a new token and try again.
        tags:
          type: array
          description: The varios tags associated with the error that provides additional information about the error.
          items: 
            type: string
            example: ACCESS_TOKEN_INVALID  
