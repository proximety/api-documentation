openapi: '3.0.2'
info:
  title: Event Service
  version: '1.0'
  description: Provides a set of API operations that can be performed on a user like updating and retrieving Event Details.
  license:
    name: Proximety
    url: www.proximety.io
servers:
  - url: https://app-dev.proximety.io/api
  - url: https://app-staging.proximety.io/api
  - url: https://app-patch.proximety.io/api
  - url: https://app.proximety.io/api
tags:
- name: EventsResource
paths:
  /events/_query:
    post: 
      tags:
        - Events
      summary: Returns Details of all Events of the Mall.
      operationId: getAdminAddedEvents
      requestBody:
       description: The Event Details to be Updated. 
       content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventSearchRequest'
       required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsListResponse'
        "400":
          description: Bad request
        "403":
          description: Unauthorized access
  /events:         
    post: 
      tags:
        - Events
      summary: Create event
      description: Creates a new event schedule for the shopping mall.
      operationId: createEvent
      requestBody:
        description: The details of the event to be created.
        content:
         application/form-data:
             schema:
                type: object
                properties:
                 event:
                  type: object
                  $ref: '#/components/schemas/EventRequestDTO'
                 banner:
                  format: binary
                  example: Expects an Image for event banner
                 poster:
                  format: binary
                  example: Expects an Image for event poster
      responses:
        "201":
          description: Event Created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponseDTO'
        "400":
          description: Bad request
        "403":
          description: Unauthorized access
  /events/{eventId}:
    get: 
      tags:
        - Events
      summary: Get Event Details that's created.
      operationId: getEventDetails
      parameters:
        - name: eventId
          in: path
          description: The internal system identifier for the event whose details are to be fetched.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Event Details Successfully Retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponseDTO'
        "400":
          description: Bad request
        "403":
          description: Forbidden
    put: 
      tags:
        - Events
      summary: Update Created Event Details.
      operationId: updateEvent
      
      parameters: 
        - name: eventId
          in: path
          description: The internal system identifier for the event whose details are to be updated.
          required: true
          schema:
            type: string    
      requestBody:
       description: The Event Details to be Updated. 
       content:
            application/form-data:
             schema:
                type: object
                properties:
                 event:
                  type: object
                  $ref: '#/components/schemas/EventRequestDTO'
                 banner:
                  format: binary
                  example: Expects an Image for event banner
                 poster:
                  format: binary
                  example: Expects an Image for event poster
       required: true
      responses:
        "204":
          description: Event Details Successfully Updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponseDTO'
        "400":
          description: Bad request
        "403":
          description: Forbidden
  
    delete: 
      tags:
        - Events
      summary: Delete a particluar Event.
      operationId: deleteEvent
      parameters:
        - name: eventId
          in: path
          description: Used as an identifier for the mall whose events are fetched.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Delete Event.
        "400":
          description: Bad request
        "403":
          description: Forbidden
components:
  schemas:

    EventsListResponse:
      type: object
      description: The event search response that contains the list of events matching the search criteria.
      properties:
        countInCurrentPage: 
          type: integer
          description: The count of events returned in the search response.
          example: 10
        totalCount: 
          type: integer
          description: The total number of events that match the specified search criteria.
          example: 100
        eventsList:
          type: array
          description: The embedded search results
          items:
                $ref: '#/components/schemas/EventResponseDTO'
    EventResponseDTO:
      type: object
      properties:
       eventId:
          type: string
          description: The internal system identifier for the Event.
          example: 00E7A620-4E8A-4F40-85DC-A1A62DF6D4EA
       mallId:
          type: string
          description: The internal system identifier for the Mall.
          example: 00E7A620-4E8A-4F40-85DC-A1A62DF6D4EA
       name:
          type: string
          description: Name of the Event.
          example: Womens' day celebration
       status:
          type: string
          description: Represents the status of the Event whether its running,gone past or its upcoming.
          example: UPCOMING
          enum:
            - UPCOMING
            - NOW_RUNNING
            - PAST
       startDate:
          type: string
          description: Filter Events based on its Start Date
          example: 2023-12-13T23:22:53.000000
       endDate:
          type: string
          description: Filter Events based on its End Date
          example: 2023-12-13T23:22:53.000000
       poster:
          type: string
          format: uri
          example: https://dev.proximety.io/images/21423.jpg
       banner:
          type: string
          format: uri
          example: https://dev.proximety.io/images/21423.jpg
       description:
          type: string
          description: Gives general Info about the Event.
          example: Womens' day is celebrated 8th March every year.
       eventType:
          type: string
          example: ALL_DAY,MULTI_DAY,SCHEDULED
          enum:
              - ALL_DAY
              - MULTI_DAY
              - SCHEDULED
    EventRequestDTO:
      type: object
      properties:
       name:
          type: string
          description: Name of the Event.
          example: Womens' day celebration
       startDate:
          type: string
          description: Filter Events based on its Start Date
          example: 2023-12-13T23:22:53.000000
       endDate:
          type: string
          description: Filter Events based on its End Date
          example: 2023-12-13T23:22:53.000000
       description:
          type: string
          description: Gives general Info about the Event.
          example: Womens' day is celebrated 8th March every year.    
       eventType:
          type: string
          example: ALL_DAY,MULTI_DAY,SCHEDULED
          enum:
              - ALL_DAY
              - MULTI_DAY
              - SCHEDULED
    EventSearchRequest:  
      type: object
      properties:   
        name:
         type: string
         description: Filter Events based on its Start Date
         example: Event 1
        eventStatuses:
          type: array
          description: A list of event status. Only events having a status specified in the list will be retrieved.
          items:
            type: string
            example: RUNNING,GONEPAST,UPCOMING
            enum:
              - GONEPAST
              - RUNNING
              - UPCOMING
        startDate:
          type: string
          description: Filter Events based on its Start Date
          example: 2023-12-13T23:22:53.000000
        endDate:
          type: string
          description: Filter Events based on its End Date
          example: 2023-12-13T23:22:53.000000
        page:
          type: integer
          description: The search offset for doing paginated search.
          example: 20
          default: 0
        size: 
          type: integer
          description: The page size for doing paginated search
          example: 10
          default: 10
