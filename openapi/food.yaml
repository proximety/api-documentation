openapi: '3.0.2'
info:
  title: Food Service
  version: '1.0'
  description: Provides a set of API operations to order food from restaurants.
  license:
    name: Proximety
    url: www.proximety.io
servers:
  - url: https://app-dev.proximety.io/api
  - url: https://app-staging.proximety.io/api
  - url: https://app-patch.proximety.io/api
  - url: https://app.proximety.io/api
paths:
  /restaurants/auth/login:
    post: 
      tags:
        - Authentication
      summary: Login 
      description: Logs in the specified user and returns the authentication token which can then be used for all subsequent API requests.
      operationId: loginFoodCourt
      requestBody:
        description: The login details for restaurant user.. 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalException"
              example: 
                {
                  "status": 400,
                  "type": "BAD_REQUEST",
                  "title": "Invalid username/password",
                  "detail": "The username or password you specified is incorrect.",
                }
  /restaurants/auth/refresh:
    post: 
      tags:
      - Authentication
      summary: Refresh Auth Token
      description: Generates a new authentication token based on the provided refresh token. When the access token expires, this API should be invoked with the refresh token to generate a new access token. If the refresh token has also expired, then the login API needs to be invoked to generate new access and refresh tokens.
      operationId: refreshToken
      requestBody:
        description: The details of the refresh token to be used to generate a new authentication token. 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalException"
              example: 
                {
                  "status": 400,
                  "type": "BAD_REQUEST",
                  "title": "Bad request",
                  "detail": "Please specify a valid refresh token and try again.",
                }
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalException"
              example: 
                {
                  "status": 403,
                  "type": "FORBIDDEN",
                  "title": "Refresh token expired",
                  "detail": "The refresh token you have specified has expired. Please login and try again.",
                  "tags":["REFRESH_TOKEN_EXPIRED"]
                }
  /restaurants/auth/reset-password:
    post: 
      tags:
        - Authentication
      summary: Reset password
      description: Resets the password for the specified user and sends a mail with the new password to the user's registered email id.
      operationId: resetPassword 
      requestBody:
        description: The password reset request.
        content:
          application/json:
            schema: 
               $ref: '#/components/schemas/PasswordResetRequest'
        required: true
      responses:
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetResponse'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalException"
              example: 
                {
                  "status": 400,
                  "type": "BAD_REQUEST",
                  "title": "Failed to send password reset email",
                  "detail": "Failed to send password reset email. A password reset email was already sent for the specified user. Please refer to the email for password reset instructions.",
                }
  /restaurants/auth/password: 
    put: 
      tags:
        - Authentication
      summary: Update password
      description: Updates the password for the specified user.
      operationId: updatePassword
      requestBody:
        description: Request body for updating the password.
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/PasswordUpdateRequest'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordUpdateResponse'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalException"
              example: 
                {
                  "status": 403,
                  "type": "BAD_REQUEST",
                  "title": "Invalid username/password.",
                  "detail": "The specified username/password is invalid. Please try again with a valid username/password.",
                  "tags":[]
                }
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GlobalException"
              example: 
                {
                  "status": 403,
                  "type": "FORBIDDEN",
                  "title": "Token expired.",
                  "detail": "The specified access token has expired. Please try again with an active access token.",
                  "tags":[]
                }
  /foodcourt/globaldata:
    get: 
      tags:
        - Global data
      summary: Returns food court global data
      description: Returns food court global data
      operationId: getGlobalData
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/FoodCourtGlobalData'
        "500":
          description: Error  
  /restaurants:
    post: 
      tags:
        - Restaurant
      summary: Create restaurant
      description: Create restaurant.
      operationId: createRestaurant
      requestBody:
        description: Restaurant information. 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Restaurant'
            example: 
              {
                "restaurantName": "Paragon",
                "ownerName": "Mohan",
                "restaurantPhoneNumberPrimary": {
                  "countryCode": "+91",
                  "phoneNumber": 9898989898
                },
                "restaurantPhoneNumberSecondary": {
                  "countryCode": "+91",
                  "phoneNumber": 9898989898
                },
                "ownerPhoneNumberPrimary": {
                  "countryCode": "+91",
                  "phoneNumber": 9898989898
                },
                "ownerPhoneNumberSecondary": {
                  "countryCode": "+91",
                  "phoneNumber": 9898989898
                },
                "email": "a@b.com",
                "floor": {
                    "id": 1
                },
                "cuisineStyles": [
                  "INDIAN"
                ],
                "openingTime": "10:00",
                "closingTime": "20:00",
                "bankAccount": {
                  "accountName": "Savings account",
                  "accountNumber": "321321321",
                  "bankName": "SBI",
                  "ifscCode": "SBIN13",
                  "upiId": "paragon@upi"
                }
              }
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
        "500":
          description: Error
    
  /restaurants/_query:
    post: 
      tags:
        - Restaurant
      summary: Returns list of restaurants
      description: Returns list of restaurants.
      operationId: getRestaurants
      parameters:
        - name: offset
          required: false
          in: query
          description: Pagination offset
          example: 10
          schema:
            type: number
        - name: pageSize
          required: false
          in: query
          description: Page size
          example: 20
          schema:
            type: number
      requestBody:
        description: Restaurant information. 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetRestaurantsRequest'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurants'
              example: 
                {
                  "restaurants": [
                      {
                          "restaurantId": "d4b9f800-2f01-40ea-9407-66abdec65a2d",
                          "restaurantName": "Paragon",
                          "ownerName": "Mohan",
                          "priorityPhoneNumber": null,
                          "restaurantPhoneNumberPrimary": {
                              "countryCode": "+91",
                              "phoneNumber": 9898989898
                          },
                          "restaurantPhoneNumberSecondary": {
                              "countryCode": "+91",
                              "phoneNumber": 9898989898
                          },
                          "ownerPhoneNumberPrimary": {
                              "countryCode": "+91",
                              "phoneNumber": 9898989898
                          },
                          "ownerPhoneNumberSecondary": {
                              "countryCode": "+91",
                              "phoneNumber": 9898989898
                          },
                          "email": "a@b.com",
                          "floor": {
                              "id": 1,
                              "name": "First floor"
                          },
                          "averageCostPerPerson": 150.0,
                          "cuisineStyles": [
                              "INDIAN"
                          ],
                          "openingTime": "10:00",
                          "closingTime": "20:00",
                          "bankAccount": {
                              "bankAccountId": "3cad46a7-70d5-424a-a670-f6d0ff6ea4b7",
                              "accountName": "Savings account",
                              "accountNumber": "321321321",
                              "bankName": "SBI",
                              "ifscCode": "SBIN13",
                              "upiId": "paragon@upi"
                          },
                           "restaurantImageUrl": "https://aws.proximety.io/s3/image1.jpg",
                     "restaurantLogoUrl": "https://aws.proximety.io/s3/image1.jpg",
                     "menuImageUrl": "https://aws.proximety.io/s3/image1.jpg",
                     "gstCertificateUrl": "https://aws.proximety.io/s3/image1.jpg",
                     "panFileUrl": "https://aws.proximety.io/s3/image1.jpg",
                     "fssaiCertificateUrl": "https://aws.proximety.io/s3/image1.jpg",
                      "rating": 0.0,
                      "numberOfRatings": 0,
                      "isOpen": false,
                      "isOnline": false,
                      "dishes": [
                                  {
                                      "dishId": "01e36d88-338e-44cf-a3cd-f18474f56d79",
                                      "restaurantId": "BEC4BD5D-AF1D-4265-9656-9707BAC5E82B",
                                      "dishName": "test",
                                      "menuCategory": {
                                          "menuCategoryId":"f94ce675-c2f5-4778-9398-08866b50e2f2",
                                          "menuCategoryName":"Biriyani"
                                      },
                                      "vegNonVeg": "VEG",
                                      "cuisineStyle": "INDIAN",
                                      "price": 200.0,
                                      "description": "vegetables panner ",
                                      "rating": 0.0,
                                      "numberOfRatings": 0,
                                      "dishImageUrl": "https://s3.ap-south-1.amazonaws.com/proximety.io/food-court-files-dev/2a40dc8b-2551-4ab7-8eda-e3f034d94684.jpeg",
                                      "dishVariantGroups": [
                                          {
                                              "dishVariantGroupId": "0a392058-4a74-4c12-b6f6-269c02670588",
                                              "variantGroupName": "c",
                                              "dishVariants": [
                                                  {
                                                      "dishVariantId": "4170b126-5ccc-4f27-a0ab-e4633e9fc13a",
                                                      "variantName": "c",
                                                      "price": 2.0
                                                  }
                                              ]
                                          }
                                      ],
                                      "addOnGroups": null,
                                      "inStock": true,
                                      "bestSeller": false
                                  }
                            ],
                      }
                  ],
                      "pageInfo": {
                        "pageable": {
                            "sort": {
                                "empty": false,
                                "sorted": true,
                                "unsorted": false
                            },
                            "offset": 0,
                            "pageSize": 2147483647,
                            "pageNumber": 0,
                            "paged": true,
                            "unpaged": false
                        },
                        "number": 0,
                        "numberOfElements": 17,
                        "size": 2147483647,
                        "totalElements": 17,
                        "totalPages": 1,
                        "first": true,
                        "last": true
                    }
              }
        "500":
          description: Error   
  /restaurants/{restaurantId}:
    get: 
      tags:
        - Restaurant
      summary: Get restaurant
      description: Get restaurant.
      operationId: getRestaurant
      parameters:
        - name: restaurantId
          required: true
          in: path
          description: Restaurant Id
          example: "123"
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
        "500":
          description: Error 
    put: 
      tags:
        - Restaurant
      summary: Update restaurant
      description: Update restaurant.
      operationId: updateRestaurant
      parameters:
        - name: restaurantId
          required: true
          in: path
          description: Restaurant Id
          example: "123"
          schema:
            type: string
      requestBody:
        description: Restaurant information. 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Restaurant'
            example: 
                {
                  "restaurantId": "123",
                  "restaurantName": "Paragon",
                  "ownerName": "Mohan",
                  "restaurantPhoneNumberPrimary": {
                    "countryCode": "+91",
                    "phoneNumber": 9898989898
                  },
                  "restaurantPhoneNumberSecondary": {
                    "countryCode": "+91",
                    "phoneNumber": 9898989898
                  },
                  "ownerPhoneNumberPrimary": {
                    "countryCode": "+91",
                    "phoneNumber": 9898989898
                  },
                  "ownerPhoneNumberSecondary": {
                    "countryCode": "+91",
                    "phoneNumber": 9898989898
                  },
                  "email": "a@b.com",
                  "floor": {
                      "id": 1
                  },
                  "cuisineStyles": [
                    "INDIAN"
                  ],
                  "openingTime": "10:00",
                  "closingTime": "20:00",
                  "bankAccount": {
                    "accountName": "Savings account",
                    "accountNumber": "321321321",
                    "bankName": "SBI",
                    "ifscCode": "SBIN13",
                    "upiId": "paragon@upi"
                  }
                }
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
        "500":
          description: Error
    delete: 
      tags:
        - Restaurant
      summary: Delete restaurant
      description: Delete restaurant.
      operationId: deleteRestaurant
      parameters:
        - name: restaurantId
          required: true
          in: path
          description: Restaurant Id
          example: "123"
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
        "500":
          description: Error 
    patch: 
      tags:
        - Restaurant
      summary: Update restaurant
      description: Update restaurant.
      operationId: patchUpdateRestaurant
      parameters:
        - name: restaurantId
          required: true
          in: path
          description: Restaurant Id
          example: "123"
          schema:
            type: string
      requestBody:
        description: Restaurant information. 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Restaurant'
            example:
              {
                "restaurantId": "123",
                "priorityPhoneNumber": {
                  "countryCode": "+91",
                  "phoneNumber": 9898989898
                },
                 "averageCostPerPerson": "150",
                  "closingTime": "20:00",
                  "openingTime": "10:00",
                  "cuisineStyles": ["CHINESE"]
              }
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
        "500":
          description: Error
     
  /restaurants/{restaurantId}/dishes:
    post: 
      tags:
        - Dishes
      summary: Create dish
      description: Create dish.
      operationId: createDish
      parameters:
        - name: restaurantId
          required: true
          in: path
          description: Restaurant Id.
          example: "123"
          schema:
            type: string
      requestBody:
        description: Dish information. 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dish'
            example:
                {
                  "restaurantId": "b30a6100-1e2d-43a7-b301-bd0fda7571c2",
                  "dishName": "CHICKOO",
                  "menuCategory": {
                      "menuCategoryId":"f94ce675-c2f5-4778-9398-08866b50e2f2"
                  },
                  "vegNonVeg": "VEG",
                  "cuisineStyle": "INDIAN",
                  "price": 125.5,
                  "description": "British style nadan biriyani",
                  "bestSeller": true,
                  "inStock": true,
                  "dishImageUrl": "https://aws.proximety.io/s3/image1.jpg",
                  "addOnGroups": [
                    {
                      "addOnGroupId": "3dc0965f-7281-4433-b04b-c228eeccc9b5"
                    }
                  ],
                  "dishVariantGroups": [
                    {
                      "variantGroupName": "Quantity",
                      "dishVariants": [
                        {
                          "dishVariantId": "123",
                          "variantName": "Half Biriyani",
                          "price": 100,
                          "inStock": true
                        }
                      ]
                    }
                  ]
                }
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dish'
        "500":
          description: Error
  /dishes/{dishId}:
    get: 
      tags:
        - Dishes
      summary: Get dish
      description: Get dish.
      operationId: getDish
      parameters:
        - name: dishId
          required: true
          in: path
          description: Dish Id.
          example: "123"
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dish'
        "500":
          description: Error
    put: 
      tags:
        - Dishes
      summary: Update dish
      description: Update dish.
      operationId: updateDish
      parameters:
        - name: dishId
          required: true
          in: path
          description: Dish Id.
          example: "123"
          schema:
            type: string
      requestBody:
        description: Dish information. 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dish'
            example:
              {
                "dishId": "a7d8e5c3-bc24-4904-a193-62002fdb48fb",
                "restaurantId": "b30a6100-1e2d-43a7-b301-bd0fda7571c2",
                "dishName": "CHICKOO",
                "menuCategory": {
                  "menuCategoryId":"f94ce675-c2f5-4778-9398-08866b50e2f2"
                },
                "vegNonVeg": "VEG",
                "cuisineStyle": "INDIAN",
                "price": 125.5,
                "description": "British style nadan biriyani",
                "rating": 0.0,
                "numberOfRatings": 0,
                "dishImageUrl": null,
                "dishVariantGroups": [
                    {
                        "dishVariantGroupId": "5573b176-963e-4dff-84cf-3048aadbe904",
                        "variantGroupName": "Quantity",
                        "dishVariants": [
                            {
                                "dishVariantId": "123",
                                "variantName": "Half Biriyani",
                                "price": 100.0,
                                "inStock": false
                            },
                            {
                                "variantName": "Full Biriyani",
                                "price": 100.0,
                                "inStock": false
                            }
                        ]
                    }
                ],
                "addOnGroups": [
                    {
                        "addOnGroupId": "46e70a41-7b3c-4295-b088-e25a5441b5cf",
                        "addOnGroupName": "toppings",
                        "restaurantId": "b30a6100-1e2d-43a7-b301-bd0fda7571c2",
                        "minimumValue": 0.0,
                        "maximumValue": 0.0,
                        "addOns": [
                            {
                                "addOnId": "4d64f6fe-a89f-4e31-a41f-02e6afa7cd3a",
                                "addOnName": "Almond Milk",
                                "price": 30.0,
                                "vegNonVeg": null,
                                "inStock": true
                            }
                        ],
                        "inStock": true
                    }
                ],
                "inStock": true,
                "bestSeller": true
            }
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dish'
        "500":
          description: Error
    delete: 
      tags:
        - Dishes
      summary: Delete dish
      description: Delete dish
      operationId: deleteDish
      parameters:
        - name: dishId
          required: true
          in: path
          description: Dish Id.
          example: "123"
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
        "500":
          description: Error
  /dishes/_query:
    post: 
      tags:
        - Dishes
      summary: Returns dishes
      description: Returns dishes in a restaurant.
      operationId: getDishes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetDishesRequest'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dishes'
        "500":
          description: Error 
  /restaurants/{restaurantId}/add-on-groups:
    post: 
      tags:
        - Add-on Groups
      summary: Create add on group
      description: Create add on group.
      operationId: createAddOnGroup
      parameters:
        - name: restaurantId
          required: true
          in: path
          description: Restaurant Id.
          example: "123"
          schema:
            type: string
      requestBody:
        description: Add on group information. 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddOnGroup'
            example:
              {
                "addOnGroupName": "toppings",
                "restaurantId": "123",
                "minimunValue": 0,
                "maximumValue": 0,
                "inStock": true,
                "addOns": [
                  {
                    "addOnName": "Almond Milk",
                    "price": 30,
                    "vegNonVeg": "VEG",
                    "inStock": true
                  }
                ]
              }
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddOnGroup'
        "500":
          description: Error

    get: 
      tags:
        - Add-on Groups
      summary: Get add on groups
      description: Get add on groups
      operationId: getAddOnGroups
      parameters:
        - name: restaurantId
          required: true
          in: path
          description: Restaurant Id.
          example: "123"
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddOnGroups'
        "500":
          description: Error
  /add-on-groups/{addOnGroupId}:
    get: 
      tags:
        - Add-on Groups
      summary: Get add on group
      description: Get add on group.
      operationId: getAddOnGroup
      parameters:
        - name: addOnGroupId
          required: true
          in: path
          description: Add on group id.
          example: "123"
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddOnGroup'
        "500":
          description: Error
    put: 
      tags:
        - Add-on Groups
      summary: Update add on group
      description: Update add on group.
      operationId: updateAddOnGroup
      parameters:
        - name: addOnGroupId
          required: true
          in: path
          description: Add on group id.
          example: "123"
          schema:
            type: string
      requestBody:
        description: Add on group information. 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddOnGroup'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddOnGroup'
        "500":
          description: Error
    delete: 
      tags:
        - Add-on Groups
      summary: Delete add on group
      description: Delete add on group.
      operationId: deleteAddOnGroup
      parameters:
        - name: addOnGroupId
          required: true
          in: path
          description: Add on group Id.
          example: "123"
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
        "500":
          description: Error
  /foodcourt/combos:
    post: 
      tags:
        - Combo
      summary: Create combo
      description: Create combo
      operationId: createCombo
      requestBody:
        description: Combo info. 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Combo'
            example:
              {
                "comboName": "Celebration Combo",
                "comboImageUrl": "https://aws.proximety.io/s3/image1.jpg",
                "comboDescription": "1 biriyani + 1 drink",
                "price": 500,
                "bestSeller": true,
                "comboCategories": [
                  {
                    "comboCategoryName": "Biriyan4",
                    "items": [
                      {
                        "restaurantId": "b30a6100-1e2d-43a7-b301-bd0fda7571c2",
                        "dishId": "c6fdb497-5e17-49f9-95b4-3a9268af8ef5",
                        "dishVariantId": "eab4c442-477e-458b-b106-a6d6345738aa"
                      }
                    ]
                  }
                ]
              }
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Combo'
        "500":
          description: Error
  /foodcourt/combos/_query:
    post: 
      tags:
        - Combo
      summary: Returns list of combos.
      description: Returns list of combos for the user.
      operationId: getCombos
      requestBody:
        description: Restaurant information. 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetCombosRequest'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Combos'
        "500":
          description: Error 
  /foodcourt/combos/{comboId}:
    get: 
      tags:
        - Combo
      summary: Get combo
      description: Get combo
      operationId: getCombo
      parameters:
        - name: comboId
          required: true
          in: path
          description: Combo Id.
          example: "123"
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Combo'
        "500":
          description: Error 
    put: 
      tags:
        - Combo
      summary: Update combo
      description: Update combo
      operationId: updateCombo
      requestBody:
        description: Combo info. 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Combo'
      parameters:
        - name: comboId
          required: true
          in: path
          description: Combo Id.
          example: "123"
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Combo'
        "500":
          description: Error 
    delete: 
      tags:
        - Combo
      summary: Delete combo
      description: Delete combo
      operationId: deleteCombo
      parameters:
        - name: comboId
          required: true
          in: path
          description: Combo Id.
          example: "123"
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
        "500":
          description: Error
  /foodcourt/promoted-combos:
    get: 
      tags:
        - Combo
      summary: Get promoted combos
      description: Get promoted combos.
      operationId: getPromotedCombo
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromotedCombos'
        "500":
          description: Error 
    post: 
      tags:
        - Combo
      summary: Create promoted combos
      description: Create promoted combos.
      operationId: createPromotedCombos
      requestBody:
        description: Combo information. 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromotedCombos'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromotedCombos'
        "500":
          description: Error
  /combos/{comboId}/files:
    post: 
      tags:
        - File Upload
      summary: Upload combo files 
      description: Upload combo files 
      operationId: uploadComboFile
      parameters:
        - name: fileCategory
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/ComboFileCategoryEnum'
        - name: comboId
          required: true
          in: path
          description: Combo Id.
          example: "123"
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: 
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Combo'
        "500":
          description: Error
    delete: 
      tags:
        - File Upload
      summary: Delete combo files 
      description: Delete combo files 
      operationId: deleteComboFile
      parameters:
        - name: fileCategory
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/ComboFileCategoryEnum'
        - name: comboId
          required: true
          in: path
          description: Combo Id.
          example: "123"
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Combo'
        "500":
          description: Error
  
  /foodcourt/order/coupons/_query:
    post: 
      tags:
        - Offer
      summary: Returns list of coupons appliacble for an order
      description: Returns list of coupons appliacble for an order
      operationId: getApplicableCoupons
      parameters:
        - name: userId
          required: true
          in: query
          example: "123"
          schema:
            type: string
      requestBody:
        description: Cart information. 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartRequest'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coupons'
        "500":
          description: Error
  /foodcourt/cart:
    post: 
      tags:
        - Order
      summary: Save cart
      description: Save cart
      operationId: saveCart
      parameters:
        - name: userId
          required: true
          in: query
          example: "123"
          schema:
            type: string
      requestBody:
        description: Cart information.  
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartRequest'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartDetails'
    get:
      tags:
        - Order
      summary: Get cart
      description: Get cart
      operationId: getCart
      parameters:
        - name: userId
          required: true
          in: query
          example: "123"
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartDetails'
  /foodcourt/orders:
    post: 
      tags:
        - Order
      summary: Place orders
      description: Place orders
      operationId: placeOrder
      parameters:
        - name: userId
          required: true
          in: query
          description: User Id.
          schema:
            format: uuid
      requestBody:
        description: Cart information.  
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartRequest'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Orders'
              example:
                          {
                            "orders": [
                              {
                                "orderId": "123",
                                "orderPlacedTime": "2021-10-20 10:00",
                                "expectedDeliveryTime": "2021-10-20 11:00",
                                "otp": 5678,
                                "preparationTime": 30,
                                "restaurantId": "123",
                                "appliedOfferId": "123",
                                "amount": 100,
                                "orderItems": [
                                  {
                                    "dish": {
                                      "dishId": "123",
                                      "restaurantId": "123",
                                      "dishName": "Chicken Biriyani",
                                      "menuCategory": {
                                          "menuCategoryId":"f94ce675-c2f5-4778-9398-08866b50e2f2"
                                      },
                                      "vegNonVeg": "VEG",
                                      "cuisineStyle": "INDIAN",
                                      "price": 125.5,
                                      "description": "British style nadan biriyani",
                                      "bestSeller": true,
                                      "inStock": true,
                                      "rating": 3.5,
                                      "numberOfRatings": 17,
                                      "dishImageUrl": "https://aws.proximety.io/s3/image1.jpg",
                                    },
                                    "addedCustomizations": [
                                      {
                                        "addOnId": "123",
                                        "addOnName": "Almond Milk",
                                        "price": 30,
                                        "vegNonVeg": "VEG",
                                        "inStock": true
                                      }
                                    ],
                                    "addedVariants": [
                                      {
                                        "dishVariantId": "123",
                                        "variantName": "Half Biriyani",
                                        "price": 100,
                                        "inStock": true
                                      }
                                    ]
                                  }
                                ],
                                "orderWorkflow": [
                                  {
                                    "sequenceId": 1,
                                    "orderStatus": "ORDER_RECEIVED",
                                    "stepStartTime": "3:10",
                                    "stepEndTime": "3:15"
                                  }
                                ]
                              }
                            ]
                          }
        "500":
          description: Error
  /foodcourt/orders/_query:
    post: 
      tags:
        - Order
      summary: Returns orders
      description: Returns orders
      operationId: getOrders
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetOrdersRequest'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Orders'
        "500":
          description: Error
  /foodcourt/orders/bundles/_query:
    post: 
      tags:
        - Order
      summary: Return order bundles
      description: Return order bundles
      operationId: getOrderBundles
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetOrdersRequest'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderBundles'
        "500":
          description: Error
  /foodcourt/orders/{orderId}:
    get: 
      tags:
        - Order
      summary: Get order
      description: Get order.
      operationId: getOrder
      parameters:
        - name: orderId
          in: path
          required: true
          description: Order Id.
          example: "123"
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        "500":
          description: Error
  /foodcourt/orders/count/_query:
    post:
      tags:
        - Order
      summary: Get orderes with count based on status grouping
      description: Get orderes with count based on status grouping
      operationId: geteOrdersCount
      requestBody:
        description: Cart information.  
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeSlabRequest'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrdersCount'
        "500":
          description: Error
  /foodcourt/orders/{orderId}/status:
    patch: 
      tags:
        - Order
      summary: Update order status
      description: Update order status
      operationId: updateOrderStatus
      parameters:
        - name: orderId
          required: true
          in: path
          description: Order Id.
          example: "123"
          schema:
            type: string
      requestBody:
        description: Order Status. 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderStatus'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        "500":
          description: Error 
  /dishes/{dishId}/reviews:
    get: 
      tags:
        - Review
      summary: Returns dish reviews
      description: Returns dish reviews.
      operationId: getDishReviews
      parameters:
        - name: dishId
          in: path
          required: true
          description: Dish Id.
          example: "123"
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reviews'
        "500":
          description: Error
    post: 
      tags:
        - Review
      summary: Create dish review
      description: Create dish review.
      operationId: createDishReview
      parameters:
        - name: dishId
          in: path
          required: true
          description: Dish Id.
          example: "123"
          schema:
            type: string
      requestBody:
        description: cart. 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
            example:
              {
                "userId": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                "rating": 3.5,
                "message": "awesome food"
              }
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        "500":
          description: Error
  /dishes/{dishId}/last-unreviewed-order:
    get: 
      tags:
        - Review
      summary: Returns last unreviewed order for a user.
      description: Returns last unreviewed order for a user.
      operationId: getLastUnreviewedOrder
      parameters:
        - name: dishId
          in: path
          required: true
          description: Dish Id.
          example: "123"
          schema:
            type: string
        - name: userId
          in: query
          required: true
          example: "1234"
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
              example:
                {
                  "orderId": "123",
                  "orderPlacedTime": "2021-10-20 10:00",
                  "expectedDeliveryTime": "2021-10-20 11:00",
                  "otp": 5678,
                  "preparationTime": 30,
                  "orderStatus": "ORDER_RECEIVED",
                  "restaurantId": "123",
                  "appliedOfferId": "123",
                  "amount": 100,
                  "orderItems": null,
                  "orderWorkflow": null
                }
        "500":
          description: Error
  /restaurants/{restaurantId}/offers:
    get:
      tags:
        - Offer
      summary: Get restaurant offers
      description: Get restaurant offers.
      operationId: getRestaurantOffers
      parameters:
        - name: restaurantId
          in: path
          required: true
          description: Restaurant Id.
          example: "123"
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestaurantOffers'
        "500":
          description: Error
    post:
      tags:
        - Offer
      summary: Create restaurant offer
      description: Create restaurant offer.
      operationId: createRestaurantOffer
      parameters:
        - name: restaurantId
          in: path
          required: true
          description: Restaurant Id.
          example: "123"
          schema:
            type: string
      requestBody:
        description: cart. 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Offer'
            example:
              {
                "discountPercentage": 15,
                "maxCap": 150,
                "userType": "ALL_USERS",
                "campaignStartDate": "2022-10-10 10:10",
                "items": [
                    "7ab8028c-b799-4f48-890c-c222",
                    "7c650655-229e-46ab-a211-777f2222"
                ],
                "couponCode": "2222222",
                "runningDays": "FRIDAY"
            }
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestaurantOffers'
        "500":
          description: Error
  /restaurants/{restaurantId}/offers/{offerId}:
    put:
      tags:
        - Offer
      summary: Update restaurant offer
      description: Update restaurant offer.
      operationId: updateRestaurantOffer
      parameters:
        - name: restaurantId
          in: path
          required: true
          description: Restaurant Id.
          example: "123"
          schema:
            type: string
        - name: offerId
          required: true
          in: path
          description: Offer Id.
          example: "123"
          schema:
            type: string
      requestBody:
        description: cart. 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Offer'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer'
        "500":
          description: Error
    delete:
      tags:
        - Offer
      summary: Delete restaurant offer
      description: Delete restaurant offer.
      operationId: deleteRestaurantOffer
      parameters:
        - name: restaurantId
          in: path
          required: true
          description: Restaurant Id.
          example: "123"
          schema:
            type: string
        - name: offerId
          required: true
          in: path
          description: Offer Id.
          example: "123"
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
  /restaurants/{restaurantId}/offers/{offerId}/status:
    patch:
      tags:
        - Offer
      summary: Activate/ end campaign the offer
      description: Activate/ end campaign the offer
      operationId: updateActivateStatus
      parameters:
        - name: restaurantId
          required: true
          in: path
          description: Restaurant Id.
          example: "123"
          schema:
            type: string
        - name: offerId
          required: true
          in: path
          description: Offer Id.
          example: "123"
          schema:
            type: string
      requestBody:
        description: Offer activation Status. 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Offer'
            example: 
              {
                "status": "INACTIVE"
              }
      responses:
        "200":
          description: Successful operation
        "500":
          description: Error
  /restaurants/{restaurantId}/menu:
    get:
      tags:
        - Dishes
      summary: Returns dish menu
      description: Returns dishes in a restaurant.
      operationId: getMenu
      parameters:
        - name: restaurantId
          required: true
          in: path
          description: Restaurant Id.
          example: "123"
          schema:
            type: string
        - name: vegNonVeg
          required: false
          in: query
          description: Cuisine Type
          schema:
            $ref: '#/components/schemas/VegNonVegEnum'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Menu'
        "500":
          description: Error      
  /restaurants/{restaurantId}/payout/_query:
    post:
      tags:
        - Analytics
      summary: Get payout of a restaurant
      description: Get payout of a restaurant
      operationId: getPayout
      parameters:
        - name: restaurantId
          required: true
          in: path
          description: Restaurant Id.
          example: "123"
          schema:
            type: string
      requestBody:
        description: Payout request. 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeSlabRequest'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payout'
        "500":
          description: Error
  /restaurants/{restaurantId}/transactions/_query:
    post:
      tags:
        - Analytics
      summary: Get transactions of a restaurant
      description: Get transactions of a restaurant
      operationId: getTransactions
      parameters:
        - name: restaurantId
          required: true
          in: path
          description: Restaurant Id.
          example: "123"
          schema:
            type: string
      requestBody:
        description: Transactions  request. 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeSlabRequest'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transactions'
        "500":
          description: Error
  /restaurants/{restaurantId}/past-payout/_query:
    post:
      tags:
        - Analytics
      summary: Get PastPayout of a restaurant
      description: Get PastPayout of a restaurant
      operationId: getPastPayout
      parameters:
        - name: restaurantId
          required: true
          in: path
          description: Restaurant Id.
          example: "123"
          schema:
            type: string
      requestBody:
        description: PastPayout  request. 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeSlabRequest'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PastPayout'
        "500":
          description: Error
  /restaurants/{restaurantId}/analytics/_query:
    post:
      tags:
        - Analytics
      summary: Get analytics of a restaurant
      description: Get analytics of a restaurant
      operationId: getAnalyitcs
      parameters:
        - name: restaurantId
          required: true
          in: path
          description: Restaurant Id.
          example: "123"
          schema:
            type: string
      requestBody:
        description: Analytics request. 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeSlabRequest'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Analytics'
        "500":
          description: Error
  /restaurants/{restaurantId}/analytics-orders/_query:
    post:
      tags:
        - Analytics
      summary: Get orders of analytics of a restaurant
      description: Get orders analytics of a restaurant
      operationId: getOrdersOfAnalyitcs
      parameters:
        - name: restaurantId
          required: true
          in: path
          description: Restaurant Id.
          example: "123"
          schema:
            type: string
      requestBody:
        description: Orders of Analytics request. 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimeSlabRequest'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyticsOrders'
        "500":
          description: Error
  /restaurants/{restaurantId}/status:
    patch: 
      tags:
        - Restaurant
      summary: Update online/offline status of a restaurant
      description: Update online/offline status of a restaurant.
      operationId: updateOffline
      parameters:
        - name: restaurantId
          required: true
          in: path
          description: Restaurant Id.
          example: "123"
          schema:
            type: string
      requestBody:
        description: Offline Status. 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRestaurantStatus'
      responses:
        "200":
          description: Successful operation
        "500":
          description: Error
  /foodcourt/promoted-restaurants:
    get: 
      tags:
        - Restaurant
      summary: Get promoted restaurants
      description: Get promoted restaurants.
      operationId: getPromotedRestaurant
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromotedRestaurants'
        "500":
          description: Error 
    post: 
      tags:
        - Restaurant
      summary: Create promoted restaurant
      description: Create promoted restaurant.
      operationId: createPromotedRestaurant
      requestBody:
        description: Restaurant information. 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromotedRestaurants'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromotedRestaurants'
        "500":
          description: Error
  /restaurants/{restaurantId}/menu-categories:        
    post: 
      tags:
        - Restaurant
      summary: Create menu Category
      description: Create menu Category
      operationId: createMenuCategory
      parameters:
        - name: restaurantId
          required: true
          in: path
          description: Restaurant Id.
          example: "123"
          schema:
            type: string
      requestBody:
        description: MenuCategory information. 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenuCategory'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuCategory'
        "500":
          description: Error
    get: 
      tags:
        - Restaurant
      summary: Get menu Categories
      description: Get menu Categories
      operationId: getMenuCategories
      parameters:
        - name: restaurantId
          required: true
          in: path
          description: Restaurant Id.
          example: "123"
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuCategories'
        "500":
          description: Error
  /restaurants/{restaurantId}/menu-categories/{menuCategoryId}:
    delete: 
      tags:
        - Restaurant
      summary: Delete menu Category
      description: Delete menu Category
      operationId: deleteMenuCategory
      parameters:
        - name: restaurantId
          required: true
          in: path
          description: Restaurant Id.
          example: "123"
          schema:
            type: string
        - name: menuCategoryId
          required: true
          in: path
          description: Menu Category Id.
          example: "123"
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
        "500":
          description: Error     
  /restaurants/{restaurantId}/files:
    post: 
      tags:
        - File Upload
      summary: Upload restaurant files 
      description: Upload restaurant files 
      operationId: uploadRestaurantFile
      parameters:
        - name: fileCategory
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/RestaurantFileCategoryEnum'
        - name: restaurantId
          required: true
          in: path
          description: Restaurant Id.
          example: "123"
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: 
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
        "500":
          description: Error
    delete: 
      tags:
        - File Upload
      summary: Delete restaurant files 
      description: Delete restaurant files 
      operationId: deleteRestaurantFile
      parameters:
        - name: fileCategory
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/RestaurantFileCategoryEnum'
        - name: restaurantId
          required: true
          in: path
          description: Restaurant Id.
          example: "123"
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
        "500":
          description: Error
  /dishes/{dishId}/files:
    post: 
      tags:
        - File Upload
      summary: Upload dish files 
      description: Upload dish files 
      operationId: uploadDishFile
      parameters:
        - name: fileCategory
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/DishFileCategoryEnum'
        - name: dishId
          required: true
          in: path
          description: Dish Id.
          example: "123"
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: 
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dish'
        "500":
          description: Error
  /foodcourt/search/history:
    get: 
      tags:
        - Search
      summary: Returns search history
      description: Returns search history of the user
      operationId: getSearchHistory
      parameters:
        - name: userId
          required: true
          in: query
          description: User Id.
          schema:
            format: uuid
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchHistory'
        "500":
          description: Error  
  /foodcourt/search/suggestions:
    get: 
      tags:
        - Search
      summary: Returns search suggestions
      description: Returns search suggestions
      operationId: getSearchSuggestions
      parameters:
        - name: keyword
          required: true
          in: query
          description: Search keyword.
          example: "para"
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchSuggestions'
        "500":
          description: Error  

components:
  schemas:
    FoodCourtGlobalData:
      type: object
      properties:
        dishCategories:
            type: array
            items:
              $ref: '#/components/schemas/DishCategory'
        cuisineStyles:
            type: array
            items:
              $ref: '#/components/schemas/CuisineStyle'
        floorInfo:
            type: array
            items:
              $ref: '#/components/schemas/FloorDetails'
    DishCategory:
      type: object
      properties:
        dishCategory:
          $ref: '#/components/schemas/DishCategoryEnum'
        dishCategoryImageUrl:
          type: string
          example: https://aws.proximety.io/s3/image1.jpg
          description: Image URL.
    MenuCategories:
      type: object
      properties:
        menuCategories:
            items:
              $ref: '#/components/schemas/MenuCategory'
    MenuCategory:
      type: object
      properties:
        menuCategoryId:
          type: string
          description: The dish category Id.
          example: 123
        menuCategoryName:
          type: string
          description: The name  dish category.
          example: Biriyani
        menuCategoryImageUrl:
          type: string
          example: https://aws.proximety.io/s3/image1.jpg
          description: Image URL.
        restaurantId:
          type: string
          example: "123"
          description: Restaurant Id.
    CuisineStyle:  
      type: object
      properties:
        cuisineStyle:
          $ref: '#/components/schemas/CuisineStyleEnum'
    FloorDetails:
      type: object
      description: The details of a floor in a shopping mall.
      properties:
        floorId: 
          type: integer
          description: The internal system identifier for a floor.
          example: 1
        name: 
          type: string
          description: The name for the floor.
          example: Ground floor 
    Restaurants:
      type: object
      properties:
        restaurants:
          description: List od restaurants.
          type: array
          items:
            $ref: '#/components/schemas/Restaurant'
    PromotedRestaurants:
      type: object
      properties:
        restaurants:
          description: List promoted restaurants.
          type: array
          items:
            $ref: '#/components/schemas/PromotedRestaurant'
    PromotedRestaurant:
      type: object
      properties:
        restaurantId:
          type: string
          example: "123"
          description: Restaurant Id.
        restaurantName:
          type: string
          example: Paragon
          description: Restaurant name.
        rank:
          type: number
          example: 1
          description: Restaurant rank.
    Restaurant:
      type: object
      properties:
        restaurantId:
          type: string
          example: "123"
          description: Restaurant Id.
        restaurantName:
          type: string
          example: Paragon
          description: Restaurant name.
        ownerName:
          type: string
          example: Mohan
          description: Restaurant owner name.
        priorityPhoneNumber:
          $ref: '#/components/schemas/PhoneNumber'
        restaurantPhoneNumberPrimary:
          $ref: '#/components/schemas/PhoneNumber'
        restaurantPhoneNumberSecondary:
          $ref: '#/components/schemas/PhoneNumber'
        ownerPhoneNumberPrimary:
          $ref: '#/components/schemas/PhoneNumber'
        ownerPhoneNumberSecondary:
          $ref: '#/components/schemas/PhoneNumber'
        email:
          type: string
          example: a@b.com
          description: Email.
        floor:
          $ref: "#/components/schemas/FloorDetails"
        averageCostPerPerson:
          type: number
          example: 100
          description: Average cost per person.
        cuisineStyles:
          type: array
          items:
            $ref: '#/components/schemas/CuisineStyleEnum'
          description: Dish categories the restaurant sells
        openingTime:
          type: string
          example: '10:00'
          description: Restaurant opening time.
        closingTime:
          type: number
          example: '20:00'
          description: Restaurant closing time.
        restaurantImageUrl:
          type: string
          example: https://aws.proximety.io/s3/image1.jpg
          description: Image URL.
        restaurantLogoUrl:
          type: string
          example: https://aws.proximety.io/s3/image1.jpg
        menuImageUrl:
          type: string
          example: https://aws.proximety.io/s3/image1.jpg
          description: Image URL.
        gstCertificateUrl:
          type: string
          example: https://aws.proximety.io/s3/image1.jpg
        panFileUrl:
          type: string
          example: https://aws.proximety.io/s3/image1.jpg
        fssaiCertificateUrl:
          type: string
          example: https://aws.proximety.io/s3/image1.jpg
        rating:
          type: number
          example: 4.1
          description: Restaurant user rating.
        numberOfRatings:
          type: number
          example: 99
          description: Number of ratings.
        isOpen:
          type: boolean
          description: Indivated whether restaurant is open or closed
        isOnline:
          type: boolean
          description: Indivated whether restaurant is online or offline
        pureVeg:
          type: boolean
          description: Indivated whether restaurant is pure veg or not.
        bankAccount:
          $ref: '#/components/schemas/BankAccount'
        dishes:
          type: array
          items:
            $ref: '#/components/schemas/Dish'
          description: List of dishes. Included only in specific cases.
    Dishes:
      type: object
      properties:
        dishes:
          type: array
          items:
            $ref: '#/components/schemas/Dish'
          description: List of dishes.
    Dish:
      type: object
      properties:
        dishId:
          type: string
          example: "123"
          description: Dish Id.
        restaurantId:
          type: string
          example: "123"
          description: Restaurant Id.
        dishName:
          type: string
          example: Chicken Biriyani
          description: Dish name.
        menuCategory:
          $ref: '#/components/schemas/MenuCategory'
        vegNonVeg:
          $ref: '#/components/schemas/VegNonVegEnum'
        cuisineStyle:
          $ref: '#/components/schemas/CuisineStyleEnum'
        price:
          type: number
          example: 125.5
          description: Dish price.
        description:
          type: string
          example: British style nadan biriyani
          description: Dish description.
        bestSeller:
          type: boolean
          example: true
          description: Indicates whether the dish is a best seller.
        inStock:
          type: boolean
          example: true
          description: Indicates whether the dish is in stock.
        rating:
          type: number
          example: 3.5
          description: Dish rating.
        numberOfRatings:
          type: integer
          example: 17
          description: Number of ratings.
        dishImageUrl:
          type: string
          example: https://aws.proximety.io/s3/image1.jpg
          description: Image URL.
        dishCategories:
          type: array
          items:
            $ref: '#/components/schemas/DishCategory'
        addOnGroups:
          type: array
          items:
            $ref: '#/components/schemas/AddOnGroup'
          description: List of add on groups linked to the dish.
        dishVariantGroups:
          type: array
          items:
            $ref: '#/components/schemas/DishVariantGroup'
          description: List of dish variant groups available for the dish.
    AddOnGroups:
      type: object
      properties:
        addOnGroups:
          type: array
          items:
            $ref: '#/components/schemas/AddOnGroup'
          description: List of dishes.
    AddOnGroup:
      type: object
      properties:
        addOnGroupId:
          type: number
          example: "123"
        addOnGroupName:
          type: string
          example: toppings
          description: Customization group name.
        restaurantId:
          type: string
          example: "123"
          description: Restaurant Id.
        minimunValue:
          type: number
          description: Minimum number to be selected.
        maximumValue:
          type: number
          description: Maximum number to be selected.
        inStock:
          type: boolean
          description: Indicates whether add on group is in stock.
        mappedDishes:
          type: array
          items:
            $ref: '#/components/schemas/Dish'
          example:
           {
             "dishId":"123",
             "dishName": "Biriyani"
           }
          description: List of add ons.
        addOns:
          type: array
          items:
            $ref: '#/components/schemas/AddOn'  
          description: List of add ons.
    AddOn:
      type: object
      properties:
        addOnId:
          type: string
          example: "123"
          description: Item Id.
        addOnName:
          type: string
          example: Almond Milk
          description: Item name.
        price:
          type: number
          example: 30
          description: Price for the customization.
        vegNonVeg:
          $ref: '#/components/schemas/VegNonVegEnum'
        inStock:
          type: boolean
          description: Indicates whether add on is in stock.
    DishVariantGroup:
      type: object
      properties:
        dishVariantGroupId:
          type: string
          example: "123"
          description: Dish variant group Id.
        variantGroupName:
          type: string
          example: Quantity
          description: Dish variant group name.
        dishVariants:
          type: array
          items:
            $ref: '#/components/schemas/DishVariant'
          description: List of dish variants.
    DishVariant:
      type: object
      properties:
        dishVariantId:
          type: string
          example: "123"
          description: Dish variant Id.
        variantName:
          type: string
          example: Half Biriyani
          description: Dish variant name.
        price:
          type: number
          example: 100
          description: Dish variant price.
        inStock:
          type: boolean
          description: Indicates whether dish variant is in stock.
    PromotedCombos:
      type: object
      properties:
        combos:
          description: List promoted combos.
          type: array
          items:
            $ref: '#/components/schemas/PromotedCombo'
    PromotedCombo:
      type: object
      properties:
        comboId:
          type: string
          example: "123"
          description: Combo Id.
        comboName:
          type: string
          example: Special Combo
          description: Combo name.
        rank:
          type: number
          example: 1
          description: Combo rank.
    Combos:
      type: object
      properties:
        combos:
          type: array
          items:
            $ref: '#/components/schemas/Combo'
          description: Image URL.
    Combo:
      type: object
      properties:
        comboId:
          type: string
          example: "123"
          description: Combo Id.
        comboName:
          type: string
          example: Celebration Combo
          description: Combo name.
        comboImageUrl:
          type: string
          example: https://aws.proximety.io/s3/image1.jpg
          description: Image URL.
        comboDescription:
          type: string
          example: 1 biriyani + 1 drink
          description: Combo description.
        price:
          type: number
          example: 500
          description: Combo price.
        bestSeller:
          type: boolean
          description: Indicates whether the combo is a best seller.
        vegNonVeg:
          $ref: '#/components/schemas/VegNonVegEnum'
        isAvailable:
          type: boolean
          description: Indicates if combo is available or not.
        comboCategories:
          type: array
          items:
            $ref: '#/components/schemas/ComboCategory'
          description: List of combo categories.
    ComboCategory:      
      type: object
      properties:
        comboCategoryId:
          type: string
          example: "123"
        categoryName:
          type: string
          example: Biriyanio
          description: Combo category name
        restaurantId:
          type: string
          example: "123"
        restaurantName:
          type: string
          example: KFC
        required:
          type: boolean
          description: Indicates if it's a required combo category.
        items:
          type: array
          items:
            $ref: '#/components/schemas/ComboItem'
          description: List of items/dishes in combo category.
    ComboItem:      
      type: object
      properties:
        comboItemId:
          type: string
          example: "123"
        comboItemName:
          type: string
          example: "Fried Chicken"
        restaurantId:
          type: string
          example: "123"
        dishId:
          type: string
          example: "123"
        dishVariantId:
          type: string
          example: "123"
        price:
          type: number
          example: 125.5
          description: Dish price.
        vegNonVeg:
          $ref: '#/components/schemas/VegNonVegEnum'
    ComboFileCategoryEnum:
       type: string
       enum:
        - COMBO_IMAGE
    Coupons:
      type: object
      properties:
        offers:
          type: array
          items:
            $ref: '#/components/schemas/Coupon'
          description: List of offers.
    Coupon:
      type: object
      properties:
        offer:
          $ref: '#/components/schemas/Offer'
        message:
          type: string
          description: Brief description about the customer perspective status of coupon.
        isApplicable:
          type: boolean
          description: Indicates this coupon is applicable or not
        saving:
          type: number
          example: 150
          description: Amount can be saved
    Offer:
      type: object
      properties:
        offerId:
          type: string
          example: "123"
          description: Offer Id.
        restaurantId:
          type: string
          example: "123"
          description: Restaurant Id.
        discountPercentage:
          type: number
          example: 15
          description: Percentage of discount
        maxCap:
          type: number
          example: 150
          description: Maximum amount of discount
        userType:
          $ref: '#/components/schemas/OfferUserTypeEnum'
        campaignStartDate:
          description: Start date.
          example: '20/10/2020'
        items:
          type: array
          example: ["123", "456"]
          items:
            type: string
        couponCode:
          type: string
          example: "abcdf"
          description: Coupon for the offer.
        runningTime:
           type: string
           example: 20:15 
        runningDays:
           $ref: '#/components/schemas/OfferDaysEnum'
        status:
          $ref: '#/components/schemas/OfferStatusEnum'
        restaurantName:
          type: string
    RestaurantOffers:
      type: object
      properties:
        offers:
          type: array
          items:
            $ref: '#/components/schemas/RestaurantOffer'
          description: List of offers.
    RestaurantOffer:
      type: object
      properties:
        restaurantO:
          $ref: '#/components/schemas/Offer'
        numberOfOrders:
          type: number
          example: 15
          description: Number Of orders used this offer
        grossSales:
          type: number
          example: 15
          description: Gross sales used this offer
        discountGiven:
          type: number
          example: 15
          description: Totaldiscount given
        effectiveDiscount:
          type: number
          example: 15
          description: Total Percentage of discount given
    OfferStatusEnum:
      type: string
      enum:
          - ACTIVE
          - INACTIVE
          - SCHEDULED
    OfferUserTypeEnum:
      type: string
      enum:
          - ALL_USERS
          - NEW_USERS
    OfferDaysEnum:
      type: string
      enum:
         - MONDAY
         - TUESDAY
         - WEDNESDAY
         - THURSDAY
         - FRIDAY
         - SATURDAY
         - SUNDAY
    Reviews:      
      type: object
      properties:
        averageRating:
          type: number
          example: 3.5
          description: Average rating.
        numberOfRatings:
          type: integer
          example: 20
          description: Number of ratings.
        userReviews:
          type: array
          items:
            $ref: '#/components/schemas/Review'
          description: List of reviews.
    Review: 
      type: object
      properties:
        username:
          type: string
          example: Sunder
        userId:
          type: string
          format: uuid
          description: User Id.
        rating:
          type: number
          example: 3.5
          description: Rating.
        review:
          type: string
          example: awesome food 
          description: Message.
        userImageUrl:
          type: string
          example: https://aws.proximety.io/s3/image1.jpg
          description: Image URL.
    CartRequest:
      type: object
      properties:
        userId:
          type: string
          example: '123'
          description: User Id.
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
          description: List of items.
        appliedOfferIds:
          type: array
          example: ["123", "456"]
          items:
            type: string
    CartItem:
      type: object
      properties:
        dishId:
          type: string
          example: "123"  
          description: Dish Id.
        quantity:
          type: number
          example: 5 
          description: Quantity.
        addOnIds:
          type: array
          example: ["123", "456"]
          items:
            type: string
        dishVariantIds:
          type: array
          example: ["123", "456"]
          items:
            type: string
    CartDetails:
      type: object
      properties:
        bundleId:
          type: string
          example: '123'
        userId:
          type: string
          example: '123'
          description: User Id.
        lastUpdatedTime:
          type: string
          example: '2022-11-07 17:12'
        cartItems:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
          description: List of items.
        appliedOffers:
          type: array
          items:
            $ref: '#/components/schemas/RestaurantOffer'
          description: List of items.
        tariff:
          $ref: '#/components/schemas/Tariff'
    Tariff:
      type: object
      properties:
        totalAmount:
          type: number
          example: 500  
          description: Order total.
        convenienceFee:
          type: number
          example: 10  
        tax:
          type: number
          example: 100  
          description: Tax.
        discount:
          type: number
          example: 25  
          description: Discount.
        toPay:
          type: number
          example: 575  
          description: To pay.
    Orders:
      type: object
      properties:
        orders:
          type: array
          items:
            $ref: '#/components/schemas/Order'
          description: List of orders.
    Order:
      type: object
      properties:
        orderId:
          type: string
          example: "123"  
          description: Order Id.
        restaurantName:
          type: string
        floor:
          $ref: "#/components/schemas/FloorDetails"
        displayId:
          type: number
          example: 1  
          description: Display Id.
        orderPlacedTime:
          type: string  
          example: '2021-10-20 10:00'
          description: Order date.
        expectedDeliveryTime:
          type: string  
          example: '2021-10-20 11:00'
          description: Order date.
        otpForDelivery: 
          type: integer
          example: 5678
          description: OTP. Present only after order is moved to ORDER_READY status.
        preparationTime: 
          type: number
          example: 30
          description: Preparation time (in minutes) updated by restaurant. Default 10 min. Present only after order is moved to CONFIRMED_AND_PREPARING_ORDER step.
        orderStatus:
          $ref: '#/components/schemas/OrderStatusEnum'
        restaurantId:
          type: string
          example: "123"
          description: Restaurant Id.
        appliedOfferId:
          type: string
          example: "123"
          description: Coupon Id.
        amount:
          type: number
          example: 100
          description: Order total price.
        orderItems:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem' 
          description: List of dishes selected by the user from the restaurant.
        orderWorkflow:
          type: array
          items:
            $ref: '#/components/schemas/OrderStage'
          description: Sequence of steps through which order has gone.
    OrderBundles:
      type: object
      properties:
        orderBundles:
          type: array
          items:
            $ref: '#/components/schemas/OrderBundle'
          description: List of order bundles.
    OrderBundle:
      type: object
      properties:
        bundleId:
          type: string
        orders:
          type: array
          items:
            $ref: '#/components/schemas/Order'
          description: List of orders.
    OrdersCount:
      type: object
      properties: 
        orderCount:
          type: array
          items:
            $ref: '#/components/schemas/OrderCount'
    OrderCount:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/OrderStatusEnum'
        count:
          type: number
          example: 3
    OrderItem:
      type: object
      properties: 
        dish:
          $ref: '#/components/schemas/Dish'
        quantity:
          type: integer  
          example: 1
          description: Quantity.
        addedCustomizations:
          type: array
          items: 
            $ref: '#/components/schemas/AddOnGroup'
          description: List of add ons.
        addedVariants:
          type: array
          items: 
            $ref: '#/components/schemas/DishVariantGroup'
    OrderStage:
      type: object
      properties:
        sequenceId:
          type: integer  
          example: 1
          description: Sequence Id.
        orderStatus:
          $ref: '#/components/schemas/OrderStatusEnum'
        stepStartTime:
          type: string
          example: 3:10 
          description: Step start time.
        stepEndTime:
          type: string
          example: 3:15
          description: Step end time. Present only if the step is completed.
    UpdateRestaurantStatus:  
      type: object
      properties:
        online:
          type: boolean  
          example: true
          description: Pass this as false to update restaurant status as closed. True for going online again.
        offlineReason:
          $ref: '#/components/schemas/OfflineReasonEnum'  
        backOnlineStrategy:
          $ref: '#/components/schemas/BackOnlineStrategyEnum'
        backOnlineTime:
          type: string
          example: '2021-10-20 10:00'
          description: Back online time. Pass this only if the backOnlineStrategy is SPECIFIC_DATE_AND_TIME.
    PhoneNumber: 
      type: object
      properties:
        countryCode:
          type: string
          description: The country code prefix for the phone number.
          example: "+91"
        phoneNumber: 
          type: number 
          example: 9898989898
          description: The 10-digit mobile number 
    BankAccount:
      type: object
      properties:
        bankAccountId:
          type: string
          example: "123"
          description: Account Id.
        accountName:
          type: string
          example: Savings account
          description: Account name.
        accountNumber:
          type: string
          example: 321321321
          description: Account number.
        bankName:
          type: string
          example: SBI
          description: Bank name.
        ifscCode:
          type: string
          example: SBIN13
          description: IFSC code.
        upiId:
          type: string
          example: paragon@upi
          description: UPI Id Id.
    OrderStatus:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/OrderStatusEnum'
        preparationTime: 
          type: number
          example: 30
          description: Preparation time (in minutes). Default 10 min. Pass this value only for CONFIRMED_AND_PREPARING_ORDER step.
    SearchHistory:
      type: object
      properties:
        recentSearches:
          type: array
          example: ["Biriyani", "paragon hotel"]
          items:
            type: string
    SearchSuggestions:
      type: object
      properties:
        suggestions:
          type: array
          items:
            $ref: '#/components/schemas/SearchSuggestion'
    SearchSuggestion:
      type: object
      properties:
        suggestionType:
          type: string
          enum:
            - DISH_CATEGORY
            - RESTAURANT
        dishCategory:
          $ref: '#/components/schemas/DishCategoryEnum'
        dishCategoryImageUrl:
          type: string
          example: https://aws.proximety.io/s3/image1.jpg
          description: Image URL. Present if suggestionType is DISH_CATEGORY.
        restaurantId:
          type: string
          example: "123"
          description: Restaurant Id. Present if suggestionType is RESTAURANT.
        restaurantName:
          type: string
          example: "Paragon"
        restaurantImageUrl:
          type: string
          example: https://aws.proximety.io/s3/image1.jpg
          description: Image URL. Present if suggestionType is RESTAURANT.
        floor:
          $ref: "#/components/schemas/FloorDetails"
        restaurntOpen:
          type: boolean
          example: true
          description: Restaurant open status
    GetOrdersRequest:
      type: object
      properties:
        startDate:
          description: Start date.
          example: '2020-10-20'
        endDate:
          description: End date.
          example: '2020-10-22'
        userId:
          type: string
          example: "123"
          description: User Id.
        restaurantId:
          type: string
          example: "123"
          description: Restaurant Id.
        excludeOrderWorkflow:
          type: boolean
          description: To exclude order step info from order object.
        inProgress:
          type: boolean
          description: Return in progress orders.
        searchKeyword:
          type: string
          description: Dish name/Order Id filter.
        dishId:
          type: string
          description: Dish Id filter.
        offerId:
          type: string
          description: Offer Id filter.
        status:
          $ref: '#/components/schemas/OrderStatusEnum'
        timeSlab:
          $ref: '#/components/schemas/TimeSlabEnum'
        statusPoll:
          type: boolean
          description: For status polling.
    GetRestaurantsRequest:
      type: object
      properties:
        restaurantName:
          type: string
          description: Restaurant name filter. Supports wildcard search also.
          example: "para"
        sortBy:
          type: string
          description: Sort strategy.
          enum:
              - RATING
              - AVERAGE_COST
        sortDirection:
          type: string
          description: Sort strategy.
          enum:
              - ASC
              - DESC
        dishCategory:
          $ref: '#/components/schemas/DishCategoryEnum'
        promotedRestaurants:
          type: boolean
          default: false
        vegNonVeg:
          $ref: '#/components/schemas/VegNonVegEnum'
        searchKeyword:
          type: string
          description: Restaurant/Dish name filter. Supports wildcard search also.
          example: "bir"
        pureVeg:
          type: boolean
          description: Indivated whether restaurant is pure veg or not.
        includeDishes:
          type: boolean
          description: To include dishes. Support only for specific use cases.
        standardFilters:
          type: array
          items:
            $ref: '#/components/schemas/RestaurantFilterEnum'
    GetDishesRequest:
      type: object
      properties:
        restaurantId:
          type: string
          description: Restaurant Id.
          example: "123"
        vegNonVeg:
          $ref: '#/components/schemas/VegNonVegEnum'
        addOnGroupId:
          type: string
          description: Filter to return dishes based on add on group Id.
          example: "123"
        keyword:
          type: string
          description: Dish name filter. Supports wildcard search.
          example: "bir"
        outOfStock:
          type: boolean
          description: Return dishes which are out of stock.
        bestSeller:
          type: boolean
          description: Return dishes best seller dishes.
        imageNotUploaded:
          type: boolean
          description: Return dishes with no image available.
        dishCategory:
         $ref: '#/components/schemas/DishCategoryEnum'
        menuCategory:
          $ref: '#/components/schemas/MenuCategory'
    GetCombosRequest:
      type: object
      properties:
        promotedCombos:
          type: boolean
          default: false
    Menu:
      type: object
      properties:
        dishGroupings:
          type: array
          items:
            $ref: '#/components/schemas/DishGrouping'
          description: List of dish groupings.
    DishGrouping:
      type: object
      properties:
        menuCategory:
          $ref: '#/components/schemas/MenuCategory'
        dishes:
          type: array
          items:
            $ref: '#/components/schemas/Dish'
    RestaurantFilterEnum:
      type: string
      enum: 
            - RATING_FOUR_PLUS
    TimeSlabEnum:
      type: string
      enum: 
            - TODAY
            - PAST_2_DAYS
            - PAST_7_DAYS
            - PAST_1_MONTH
    OrderStatusEnum:
      type: string
      enum:
            - ORDER_RECEIVED
            - CONFIRMED_AND_PREPARING_ORDER
            - ORDER_READY
            - ORDER_DELIVERED
            - ORDER_REJECTED
            - REFUND_INITIATED
    OfflineReasonEnum:
      type: string
      enum:
        - RAW_MATERIAL_OR_ITEM_OUT_OF_STOCK
        - HIGH_ORDER_RUSH_OR_KITCHEN_IS_FULL
        - KITCHEN_STAFF_NOT_AVAILABLE
        - NEARING_CLOSING_TIME
        - TEMPORARLY_CLOSED
        - ISSUES_WITH_MENU
        - OTHERS
    BackOnlineStrategyEnum:
      type: string
      enum:
        - AFTER_TWO_HOURS
        - AFTER_FOUR_HOURS
        - TOMORROW_MORNING
        - SPECIFIC_DATE_AND_TIME
        - WILL_TURN_ON_MANUALLY
    RestaurantFileCategoryEnum:
      type: string
      enum:
        - RESTAURANT_IMAGE
        - RESTAURANT_LOGO
        - RESAURANT_MENU_IMAGE
        - RESTAURANT_GST_CERTIFICATE
        - RESTAURANT_PAN
        - RESTAURANT_FSSAI_CERTIFICATE
    DishFileCategoryEnum:
      type: string
      enum:
        - DISH_IMAGE
    DishCategoryEnum:
      type: string
      description: Dynamic list. Obtained from globaldata API.
      enum:
        - BIRIYANI
        - COFFE
        - PIZZA
    VegNonVegEnum:
      type: string
      enum:
        - VEG
        - NON_VEG
    CuisineStyleEnum:
      type: string
      description: Dynamic list. Obtained from globaldata API.
      enum:
        - INDIAN
        - CHINESE
        - ARABIC
    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken: 
          type: string
          description: The refresh token based on which the new authentication token needs to be generated.
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJ1bV9hY2N
    PasswordUpdateRequest:
      type: object
      description: The password update request.
      required:
        - username
        - currentPassword
        - newPassword
      properties:
        username: 
          type: string
          description: The username for the user whose password needs to be updated.
          example: proximety-user101
        currentPassword:
          type: string
          description: The current password for the user whose passoword needs to be updated.
          example: uuiwquqxx
          format: password
        newPassword:
          type: string
          description: The new password for the user whose passoword needs to be updated.
          example: 1235c12
          format: password
    PasswordUpdateResponse:
      type: object
      description: The password update response.
      properties:
        username:
          type: string
          description: The user name for the user logged into the system.
          example: proximety-user101
        restaurantId:
          type: string
          description: The internal system identifier for the food court.
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
        accessToken:
          type: string
          description: The token generated after authentication which needs to be passed in all subsequent calls to the system.
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJ1bV9hY2Nlc3MiLCJleHAiOjE2NjAyODE5
        accessTokenType: 
          type: string
          description: The type of access token used.
          example: Bearer
        refreshToken:
          type: string
          description: The refresh token that can be used to regenerate the access token once it has expired.
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJ1bV9hY2N
    PasswordResetRequest:
      type: object
      description: The password reset request.
      required:
        - username
      properties:
        username:
          type: string
          description: The username for the user whose password needs to be reset. 
          example: proximety-user101
    PasswordResetResponse:
      type: object
      description: The password reset response.
      properties:
        username: 
          type: string
          description: The username for the user whose password is being reset.
          example: proximety-user101
        message:
          type: string
          description: The response message for the attempted password reset.
          example: An email has been sent to x***z@gmail.com with password reset instructions.
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: The username for the food court that needs to log info.
          example: xyz@gmail.com
        password:
          type: string
          description: The password of the food court trying to log into the system.
          format: password
          example: password
    PastPayout:
      type: object
      properties:
        payments:
            type: array
            items:
              $ref: '#/components/schemas/PastPayoutPayment'
            description: Orders in past payout of a restaurant.
    PastPayoutPayment:
      type: object
      description: Past payout payment of a restaurants.
      properties:
        date:
          type: string
          example: '2021-10-20 10:10'
        utrId:
          type: string
          example: 'UTR1234'
        netReceivables:
         type: number
         example: 100
        account:
         type: string
         example: 'ABC'
    Payout:
      type: object
      description: Payout of a restaurants.
      properties:
        grossRevenue:
          type: number
          example: 200
        deductions:
          $ref: '#/components/schemas/Deductions'
        netReceivables:
         type: number
         example: 100
        utrId:
          type: number
          example: 1234
        date:
         type: string
         example: '25/10/2020'
        account:
          type: string
          example: 'xxx123'
    Transactions:
      type: object
      description: Transactions of a restaurant.
      properties:
        orders:
          type: array
          items:
            $ref: '#/components/schemas/TransactionOrder'
          description: Orders in transactions of a restaurant.
    Deductions: 
      type: object
      description: Deduction in a transaction.
      properties:
       total:
         type: number
         example: 123
       tax:
         type: number
         example: 123
       commision:
         type: number
         example: 123
       taxOnCommision:
        type: number
        example: 123
       convenienceFee:
         type: number
         example: 123
    TransactionOrder:
      type: object
      description: Order in a transaction.
      properties:
        orderId:  
          type: number
          example: 123
        OrderStatus: 
          $ref: '#/components/schemas/OrderStatusEnum'
        grossRevenue:
          type: number
          example: 20000
        netReceivable:
          type: number
          example: 1000
        unsettledAmount:
          type: number
          example: 1000
        date:
          description: End date.
          example: '2021-10-20 10:10'
    TimeSlabRequest:
      type: object
      description: Request body of analytics
      properties:
        startDate:
          type: string
          example: '2021-10-20'
        endDate:
          type: string
          example: '2021-10-20'
        timeSlab:
          $ref: '#/components/schemas/TimeSlabEnum'
    Analytics: 
      type: object
      description: Analytics of a restaurant.
      properties:
        grossAmount:
          type: number
          example: 20000
        deductions:
          type: number
          example: 500
        amountPaidByProximety:
          type: number
          example: 300
        ordersDelivered:
          type: number
          example: 23
    AnalyticsOrders:
      type: object
      description: Orders for Analytics of a restaurant.
      properties:
        analyticsOrders:
          type: array
          items: 
            $ref: '#/components/schemas/AnalyticsOrder'
    AnalyticsOrder:
      type: object
      description: Order info for Analytics of a restaurant.
      properties:
        orderPlacedTime:
          type: string
          example: '2021-10-20'
        orderId:
          type: string
          example: '123'
        amount:
          type: number
          example: 300
        deduction:
          type: number
          example: 300
        amountPaidByProximety:
          type: number
          example: 300
    GlobalException:
      type: object
      description: An exception thrown by the system.
      properties:
        status:
          type: integer
          description: The status code for the error.
          example: 401
        type:
          type: string
          description: The type name for the error being thrown.
          example: UNAUTHORIZED
        title:
          type: string
          description: The error title.
          example: Token expired.
        detail:
          type: string
          description: The details of the error being thrown.
          example: The access token has expired for the user. Please generate a new token and try again.
        tags:
          type: array
          description: The varios tags associated with the error that provides additional information about the error.
          items: 
            type: string
            example: ACCESS_TOKEN_INVALID 
    LoginResponse:
      type: object
      properties:
        username:
          type: string
          description: The user name for the user logged into the system.
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
        restaurantId:
          type: string
          description: The internal system identifier for the food court.
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
        accessToken:
          type: string
          description: The token generated after authentication which needs to be passed in all subsequent calls to the system.
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJ1bV9hY2Nlc3MiLCJleHAiOjE2NjAyODE5
        accessTokenType: 
          type: string
          description: The type of access token used.
          example: Bearer
        refreshToken:
          type: string
          description: The refresh token that can be used to regenerate the access token once it has expired.
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJ1bV9hY2N
        needsPasswordUpdate:
          type: string
          description: True indicates that the passowrd needs to be reset for the user, false indicates otherwise.
          example: false